declare function leftPad(number: number): string;
declare const QS: {
    stringify(obj: object): string;
    parse<T extends object = object>(querystring: string): Partial<T>;
};
declare const sleep: (ms: number) => Promise<void>;
declare function getQuery<T extends string = string>(key: T): string | undefined;
declare function getQuery<T extends string = string>(): Partial<Record<T, string>>;
declare function randomString(length?: number, chars?: string): string;
declare const featureMap: {
    lossy: string;
    lossless: string;
    alpha: string;
    animation: string;
};
declare function checkWebpFeature(feature?: keyof typeof featureMap): Promise<boolean>;
declare function countdown(ms: number): ({
    name: string;
    value: string;
} | {
    name: string;
    value: null;
})[];
declare function shortNumber(num: number, unit?: 'k' | 'w'): string | number;
declare function transNumber(num?: number | string): string;
declare const DeviceInfo: {
    readonly system: "windows" | "macos" | "linux" | "android" | "ios" | "unknown";
    readonly platform: "apple" | "google" | "microsoft" | "unknow";
};
declare function styleWords(sentence: string, style: (words: string) => any): any[];
declare function formatTime(timeStr: string | number, needYear?: boolean): string;

export { DeviceInfo, QS, checkWebpFeature, countdown, formatTime, getQuery, leftPad, randomString, shortNumber, sleep, styleWords, transNumber };
