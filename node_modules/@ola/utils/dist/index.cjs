'use strict';

function leftPad(number) {
  return `${number < 10 ? `0${number}` : number}`;
}
const QS = {
  stringify(obj) {
    return Object.entries(obj).map(([key, value]) => `${key}=${value}`).join("&");
  },
  parse(querystring) {
    const result = {};
    querystring.split("&").forEach((item) => {
      const [key, value] = item.split("=");
      result[key] = value;
    });
    return result;
  }
};
const sleep = (ms) => new Promise((resolve) => {
  setTimeout(resolve, ms);
});
function getQuery(key) {
  const [, querystring] = window.location.search.split("?");
  const params = querystring ? QS.parse(querystring) : {};
  if (!key)
    return params;
  const value = params[key];
  return value;
}
function randomString(length = 32, chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") {
  let result = "";
  for (let i = length; i > 0; i -= 1)
    result += chars[Math.floor(Math.random() * chars.length)];
  return result;
}
const featureMap = {
  lossy: "UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA",
  lossless: "UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==",
  alpha: "UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==",
  animation: "UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA"
};
function checkWebpFeature(feature = "animation") {
  return new Promise((resolve) => {
    const img = new Image();
    img.onload = () => resolve(img.width > 0 && img.height > 0);
    img.onerror = (err) => {
      console.log(`webperr`, err);
      resolve(false);
    };
    img.src = `data:image/webp;base64,${featureMap[feature]}`;
  });
}
function countdown(ms) {
  const restDays = Math.floor(ms / (24 * 60 * 60 * 1e3));
  const restHours = Math.floor(ms / (60 * 60 * 1e3));
  const restMintues = Math.floor(ms / (60 * 1e3));
  const restSeconds = Math.floor(ms / 1e3);
  const restMap = {
    days: restDays,
    hours: restHours % 24,
    minutes: restMintues % 60,
    seconds: restSeconds % 60
  };
  return Object.entries(restMap).map(([name, value], index, arr) => {
    const preItem = arr[index - 1];
    if (value > 0)
      return { name, value: leftPad(value) };
    if (!preItem)
      return { name, value: null };
    if (preItem[1] <= 0)
      return { name, value: null };
    return { name, value: leftPad(value) };
  });
}
function shortNumber(num, unit = "k") {
  if (num < { k: 1e3, w: 1e4 }[unit])
    return num;
  const numTxt = (num / { k: 1e3, w: 1e4 }[unit]).toFixed(2) + unit;
  function short(numTxt2) {
    const arr = numTxt2.split(".");
    return arr[1] === "00" ? arr[0] : numTxt2;
  }
  return short(numTxt);
}
function transNumber(num = 0) {
  const num2 = +num;
  if (num2 < 1e3)
    return num2.toFixed(2);
  if (num2 < 1e6)
    return `${(num2 / 1e3).toFixed(2)}k`;
  return `${(num2 / 1e6).toFixed(2)}m`;
}
const DeviceInfo = {
  get system() {
    const ua = navigator.userAgent.toLowerCase();
    const testUa = (regexp) => regexp.test(ua);
    if (testUa(/windows|win32|win64|wow32|wow64/g))
      return "windows";
    if (testUa(/macintosh|macintel/g))
      return "macos";
    if (testUa(/x11/g))
      return "linux";
    if (testUa(/android|adr/g))
      return "android";
    if (testUa(/ios|iphone|ipad|ipod|iwatch/g))
      return "ios";
    return "unknown";
  },
  get platform() {
    if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent))
      return "apple";
    if (/(Android)/i.test(navigator.userAgent))
      return "google";
    if (/Windows/i.test(navigator.userAgent))
      return "microsoft";
    return "unknow";
  }
};
function styleWords(sentence, style) {
  return sentence.split(/(\[|\])/).map((item, index, arr) => {
    if (["[", "]"].includes(item))
      return "";
    if (arr[index - 1] === "[" && arr[index + 1] === "]")
      return style(item);
    return item;
  });
}
function formatTime(timeStr, needYear) {
  const temp = +timeStr * 1e3;
  const yy = new Date(temp).getFullYear();
  const mm = leftPad(new Date(temp).getMonth() + 1);
  const date = leftPad(new Date(temp).getDate());
  const hh = leftPad(new Date(temp).getHours());
  const fen = leftPad(new Date(temp).getMinutes());
  if (needYear) {
    return `${yy}.${mm}.${date} ${hh}:${fen}`;
  }
  return `${mm}.${date} ${hh}:${fen}`;
}

exports.DeviceInfo = DeviceInfo;
exports.QS = QS;
exports.checkWebpFeature = checkWebpFeature;
exports.countdown = countdown;
exports.formatTime = formatTime;
exports.getQuery = getQuery;
exports.leftPad = leftPad;
exports.randomString = randomString;
exports.shortNumber = shortNumber;
exports.sleep = sleep;
exports.styleWords = styleWords;
exports.transNumber = transNumber;
